1.Container with most water

 public static void mostWater( Integer[] height ){
        int q=0;
        int mul=0;
        int fin=0;
        for(int p=0;p<=height.length-1;p++){
            q=p+1;
            for(int i=q;i<height.length;i++){
                if(height[p]< height[q]){
                    mul=(height[p]*(q-p));
                    if (mul>fin) {

                        fin=mul;
                    }
                }else{
                     mul=(height[q]*(q-p));
                     if (mul>fin) {
                        fin=mul;
                     }
                }
                q++;
            }
        }
        System.out.println(fin);

    }

2.Row Rotation Policy of your classroom

 public static Integer rowRotation(Integer examWeek, String[][] matrix) {


        String temp = "";
        for (int i = 0; i < examWeek - 1; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                temp = matrix[5][j];
                for (int k = 5; k >= 1; k--) {
                    matrix[k][j] = matrix[k - 1][j];
                }
                matrix[0][j] = temp;

            }
        }
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                System.out.print("| " + matrix[i][j] + "  ");
            }
            System.out.print("|");
            System.out.println();
        }

        Integer Row = 0;
        for (int i1 = 0; i1 < matrix.length; i1++) {
            Row++;
            for (int i = 0; i < matrix[0].length; i++) {

                if (matrix[i1][i] == "AA") {
                    return Row;
                }
            }

        }
        return Row;

    }

3. Matrix Compression

   public static Integer[][] compressMatrix( Integer[][] matrix ){

       Integer array[][]=new Integer[2][2];
       int col=0;
       int temp=0;
       for (int row = 0; row < matrix.length/2; row++) {
        col=0;
        temp+=matrix[row][col++] + matrix[row][col];
        array[0][0]=temp;
       }
       temp=0;
       for (int row = 0; row < matrix.length/2; row++) {
        col=2;
        temp+=matrix[row][col++] + matrix[row][col];
        array[0][1]=temp;
       }
       temp=0;
       for (int row=2; row < matrix.length; row++) {
        col=0;
        temp+=matrix[row][col++] + matrix[row][col];
        array[1][0]=temp;
       }
       temp=0;
       for (int row = 2; row < matrix.length; row++) {
        col=2;
        temp+=matrix[row][col++] + matrix[row][col];
        array[1][1]=temp;
       }


        return array;
    }

4.Game Arena

 public static void playGame( Integer[][] arena ){

        int cell=0;
        for(int row=0; row<arena.length; row++){
           for (int col = 0; col < arena[0].length; col++) {
            if (arena[row][col]!=0 && arena[row][col]%50==0) {
                if (col+1 <arena[0].length && arena[row][col+1]==2) {
                    cell++;
                }
                 if (col-1>=0 && arena[row][col-1]==2) {
                    cell++;
                }
                 if (row-1>=0 && arena[row-1][col]==2) {
                    cell++;
                }
                 if (row+1 < arena.length && arena[row+1][col]==2) {
                    cell++;
                }
            }
           }    
            
        }
        if ((cell*2)<10) {
            System.out.println("Points Gained "+(cell*2)+". Your team is out.");
            
        }else{
            System.out.println("Points Gained "+(cell*2)+". Your team has survived the game.");
        }
    }
